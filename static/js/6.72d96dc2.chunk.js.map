{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","utils/validators/validators.js","components/common/FormsControls/FormsControls.js","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","required","value","maxLengthCreator","maxLength","length","Textarea","input","meta","touched","error","props","hasError","className","styles","formControl","Input","DialogItem","s","dialog","active","to","id","name","Message","message","maxLength50","DialogsReduxForm","reduxForm","onSubmit","handleSubmit","Field","component","placeholder","validate","Dialogs","dialogsData","dialogsPage","dialogs","map","item","key","messagesData","messages","dialogsItems","formData","sendMessage","mapStateToProps","state","isAuth","auth","compose","Component","RedirectComponent","this","React","connect","dispatch","sendMessageCreator"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,iCCD3H,oEAAO,IAAMC,EAAW,SAAAC,GACpB,IAAIA,EACJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC5C,GAAIA,GAASA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,oJCH9BE,EAAW,SAAC,GAA8C,IAA7CC,EAA4C,EAA5CA,MAA4C,IAAtCC,KAAQC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,MAAUC,EAAW,gCAC5DC,EAAWH,GAAWC,EAC5B,OACI,yBAAKG,UAAWC,IAAOC,YAAc,KAAOH,EAAWE,IAAOJ,MAAQ,KAClE,6BACI,8CAAcH,EAAWI,KAE5BC,GAAY,8BAAOF,KAMnBM,EAAQ,SAAC,GAA8C,IAA7CT,EAA4C,EAA5CA,MAA4C,IAAtCC,KAAQC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,MAAUC,EAAW,gCACzDC,EAAWH,GAAWC,EAC5B,OACI,yBAAKG,UAAWC,IAAOC,YAAc,KAAOH,EAAWE,IAAOJ,MAAQ,KAClE,6BACI,2CAAWH,EAAWI,KAEzBC,GAAY,8BAAOF,M,oBCtBhCX,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,8FCWpMiB,EARI,SAACN,GAChB,OACI,yBAAKE,UAAWK,IAAEC,OAAS,IAAMD,IAAEE,QAC/B,kBAAC,IAAD,CAASC,GAAI,YAAcV,EAAMW,IAAKX,EAAMY,QCEzCC,EANC,SAACb,GACb,OACI,yBAAKE,UAAWK,IAAEO,SAAUd,EAAMc,U,oCCGpCC,EAAcvB,YAAiB,IAgB/BwB,EAAmBC,YAAU,CAC/B,KAAS,cADYA,EAdL,SAACjB,GACjB,OACI,0BAAMkB,SAAUlB,EAAMmB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAW1B,IAAUiB,KAAM,UAAWU,YAAY,qBACzDC,SAAU,CAACjC,IAASyB,MAExB,6BACI,6CAwCDS,EA9BC,SAACxB,GAEb,IAAIyB,EAAczB,EAAM0B,YAAYC,QAAQC,KAAK,SAACC,GAC1C,OAAO,kBAAC,EAAD,CAAYjB,KAAMiB,EAAKjB,KAAMD,GAAIkB,EAAKlB,GAAImB,IAAKD,EAAKlB,QAI/DoB,EAAe/B,EAAM0B,YAAYM,SAASJ,KAAK,SAACd,GAChD,OAAO,kBAAC,EAAD,CAASA,QAASA,EAAQA,QAASgB,IAAKhB,EAAQH,QAO3D,OACI,yBAAKT,UAAWK,IAAEoB,SACd,yBAAKzB,UAAWK,IAAE0B,cACZR,GAEN,yBAAKvB,UAAWK,IAAEyB,UACd,6BAAMD,GACN,6BACI,kBAACf,EAAD,CAAkBE,SAZjB,SAACgB,GACdlC,EAAMmC,YAAYD,EAASpB,gB,+CCpC/BsB,EAAkB,SAACC,GACnB,MAAO,CACHC,OAASD,EAAME,KAAKD,S,QCebE,uBDXiB,SAACC,GAAe,IAEtCC,EAFqC,uKAInC,OAAKC,KAAK3C,MAAMsC,OACT,kBAACG,EAAcE,KAAK3C,OADI,kBAAC,IAAD,CAAUU,GAAI,eAJV,GAEXkC,IAAMH,WAStC,OAFiCI,YAAQT,EAARS,CAAyBH,KCI1DG,aAhBkB,SAACR,GACnB,MAAO,CACHX,YAAcW,EAAMX,gBAIH,SAACoB,GACtB,MAAO,CACHX,YAAc,SAACrB,GACXgC,EAASC,YAAmBjC,SAKzB0B,CAGbhB","file":"static/js/6.72d96dc2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3oI2W\",\"error\":\"FormsControls_error__9lcue\",\"formSummaryError\":\"FormsControls_formSummaryError__1F2-S\"};","export const required = value => {\n    if (value) return undefined\n    return 'Field is required'\n}\n\nexport const maxLengthCreator = (maxLength) => (value) => {\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`\n    return undefined\n}","import React from 'react'\nimport styles from './FormsControls.module.css'\n\nexport const Textarea = ({input,meta : {touched, error},...props}) => {\n    const hasError = touched && error\n    return (\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\n            <div>\n                <textarea {...input} {...props}/>\n            </div>\n            {hasError && <span>{error}</span> }\n        </div>\n\n    )\n}\n\nexport const Input = ({input,meta : {touched, error},...props}) => {\n    const hasError = touched && error\n    return (\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\n            <div>\n                <input {...input} {...props}/>\n            </div>\n            {hasError && <span>{error}</span> }\n        </div>\n\n    )\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","import React from 'react';\nimport s from './../Dialogs.module.css';\nimport {NavLink} from \"react-router-dom\";\n\nconst DialogItem = (props) => {\n    return (\n        <div className={s.dialog + ' ' + s.active}>\n            <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\n        </div>\n    );\n}\n\nexport default DialogItem;","import React from 'react';\nimport s from './../Dialogs.module.css';\n\nconst Message = (props) => {\n    return (\n        <div className={s.message}>{props.message}</div>\n    );\n}\n\nexport default Message;","import React from 'react';\nimport s from './Dialogs.module.css';\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport { Field, reduxForm } from 'redux-form';\nimport { maxLengthCreator, required } from '../../utils/validators/validators';\nimport { Textarea } from '../common/FormsControls/FormsControls';\n\nconst maxLength50 = maxLengthCreator(50)\n\nconst DialogsForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={Textarea} name={'message'} placeholder='Enter your message'\n                validate={[required,maxLength50]}/>    \n            </div>\n            <div>\n                <button>Send</button>\n            </div>\n        </form>\n    )\n}\n\nconst DialogsReduxForm = reduxForm({\n    'form' : 'newMessage'\n})(DialogsForm)\n\nconst Dialogs = (props) => {\n\n    let dialogsData = props.dialogsPage.dialogs.map( (item) => {\n            return <DialogItem name={item.name} id={item.id} key={item.id} />\n        }\n    );\n\n    let messagesData = props.dialogsPage.messages.map( (message) => {\n        return <Message message={message.message} key={message.id}/>\n    } );\n\n    const onSubmit = (formData) => {\n        props.sendMessage(formData.message)\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                { dialogsData }\n            </div>\n            <div className={s.messages}>\n                <div>{messagesData}</div>\n                <div>\n                    <DialogsReduxForm onSubmit={onSubmit}/>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Dialogs;","import React from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nlet mapStateToProps = (state) => {\n    return {\n        isAuth : state.auth.isAuth\n    }\n}\n\nexport const withAuthRedirect = (Component) => {\n\n    class RedirectComponent extends React.Component {\n        render() {\n            if (!this.props.isAuth) return <Redirect to={'/login'} />\n            return <Component {...this.props} />\n        }\n    }\n\n    let connectedRedirectComponent = connect(mapStateToProps)(RedirectComponent);\n\n    return connectedRedirectComponent;\n\n}","import React from 'react';\nimport {sendMessageCreator} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport { connect } from 'react-redux';\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\nimport { compose } from 'redux';\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogsPage : state.dialogsPage,\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        sendMessage : (message) => {\n            dispatch(sendMessageCreator(message))\n        }\n    }\n}\n\nexport default compose(\n    withAuthRedirect,\n    connect(mapStateToProps, mapDispatchToProps),\n)(Dialogs)"],"sourceRoot":""}